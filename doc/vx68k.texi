\input texinfo
@c This Texinfo document has been automatically generated by
@c docbook2texi from a DocBook documentation.  The tool used
@c can be found at:
@c <URL:http://shell.ipoline.com/~elmert/hacks/docbook2X/>
@c Please send any bug reports, improvements, comments, 
@c patches, etc. to Steve Cheng <steve@ggi-project.org>.

@setfilename vx68k.info

@titlepage
@title Virtual X68000 Reference Manual
@author Kaz Sasayama 
@page
@vskip 0pt plus 1fill
Copyright @copyright{} 1999, 2000 Hypercore Software Design, Ltd.

Permission is granted to make and distribute verbatim copies
of this manual provided the copyright notice and this
permission notice are preserved on all copies.

@end titlepage

@node top
@top Virtual X68000 Reference Manual
Abstract: 
Virtual X68000 is a host-architecture independent emulator of
Sharp X68000 written in C++.

@menu
* Using Virtual X68000::	
* Command Reference::	
* Inside Virtual X68000::	
* General purpose components::	
* X68000 emulation::	
@end menu

@node Using Virtual X68000
@chapter Using Virtual X68000
@menu
* Introdution::	
@end menu

@node Introdution
@section Introdution
....

@node Command Reference
@chapter Command Reference
@menu
* vx68k::	
@end menu

@node vx68k
@section vx68k
@menu
@end menu

@subheading Name
vx68k --- run X68000 command on a virtual machine

@subheading Synopsis

@code{vx68k}
[@var{option}]...
[--]
@var{command}
[@var{argument}]...

@subheading Description
@code{vx68k} runs X68000
@var{command} on a virtual machine.

...

@subheading Options
@table @asis
@item @samp{-M n}
@itemx @samp{--memory-size=n}
Allocate @var{n} megabytes.

@end table

@node Inside Virtual X68000
@chapter Inside Virtual X68000
@menu
* Basic types::	
@end menu

@node Basic types
@section Basic types
Virtual X68000 defines several basic types to keep the program
portable. These types are defined in namespace
@code{vm68k::types} and imported in namespace
@code{vm68k}.

@menu
* Unsigned integer types::	
* Signed integer types::	
@end menu

@node Unsigned integer types
@subsection Unsigned integer types
@code{uint_type} is a natural unsigned type that can
hold an unsigned word number on M68000. This type is
@code{unsigned int} on all host architectures.

@code{uint32_type} is a natural unsigned type that can
hold an unsigned long word number on M68000. This type is
@code{unsigned int} on host architectures that have
@code{unsigned int} with at least 32-bit.

@node Signed integer types
@subsection Signed integer types
@code{sint_type} is a natural signed type that can
hold a signed word number on M68000. This type is
@code{int} on most host architectures, but if the host
architecture cannot represent -0x8000 in that type, i.e. it
does not use 2's complement representation, it is @code{long
int} instead.

@code{sint32_type} is a natural signed type that can
hold a signed long word number on M68000. This type is
@code{int} on host architectures that have
@code{int} with at least 32-bit and that can represent
-0x80000000 in that type. Otherwise, it is @code{long
int} if the type can hold -0x80000000, or @code{long
long int} if the compiler is GCC. If no type can hold
-0x80000000 on the architecture, Virtual X68000 cannot be
compiled.

@node General purpose components
@chapter General purpose components
General purpose components are provided by the libvm68k library.

@menu
* Address space::	
* Processor::	
@end menu

@node Address space
@section Address space
Virtual X68000 uses a single address space to access memory
and peripheral devices.

@node Processor
@section Processor
A processor is made of a pair of a context and an execution
unit. A context represents the dynamic state, which is
updated by program execution. An execution unit represents
the static setting that is not changed while program
execution.

@menu
* Context::	
* Execution unit::	
@end menu

@node Context
@subsection Context
The state of the processor is stored in a context. Major
components of a context are a set of registers and a
reference to an address space.

@node Execution unit
@subsection Execution unit
Virtual X68000 encapsulates non-dynamic aspects of a M68000
processor into an execution unit.

@node X68000 emulation
@chapter X68000 emulation
@menu
* Machine::	
* Human68k::	
@end menu

@node Machine
@section Machine
In Virtual X68000, a machine is an abstraction of X68000
hardware and firmware BIOS.

@node Human68k
@section Human68k
Virtual X68000 is unique as it also offers functions of the
basic operating system, Human68k.

@bye
