\input texinfo                  @c -*- Texinfo -*-
@c %**start of header
@setfilename vx68k.info
@settitle Virtual X68000 Reference Manual
@c %**end of header

@ifinfo
This file documents Virtual X68000.

Copyright 1999-2000 Hypercoe Software Design, Ltd.

Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.
@end ifinfo

@titlepage
@title Virtual X68000 Reference Manual
@author Kaz Sasayama 
@page
@vskip 0pt plus 1filll
Copyright @copyright{} 1999, 2000 Hypercore Software Design, Ltd.

Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.
@end titlepage

@contents

@ifinfo
@node Top, Using Virtual X68000, (dir), (dir)
@top Virtual X68000 Reference Manual
Virtual X68000 is a host-architecture independent emulator of
Sharp X68000 written in C++.

@menu
* Using Virtual X68000::        
* Command Reference::           
* Inside Virtual X68000::       
* General purpose components::  
* X68000 emulation::            
* Concept Index::               
@end menu
@end ifinfo

@node Using Virtual X68000, Command Reference, Top, Top
@chapter Using Virtual X68000
@menu
* Introdution::                 
@end menu

@node Introdution,  , Using Virtual X68000, Using Virtual X68000
@section Introdution
....

@node Command Reference, Inside Virtual X68000, Using Virtual X68000, Top
@chapter Command Reference
@menu
* vx68k::                       
@end menu

@node vx68k,  , Command Reference, Command Reference
@section vx68k
@menu
@end menu

@subheading Name
vx68k --- run X68000 command on a virtual machine

@subheading Synopsis

@code{vx68k}
[@var{option}]...
[--]
@var{command}
[@var{argument}]...

@subheading Description
@code{vx68k} runs X68000
@var{command} on a virtual machine.

...

@subheading Options
@table @asis
@item @samp{-M n}
@itemx @samp{--memory-size=n}
Allocate @var{n} megabytes.

@end table

@node Inside Virtual X68000, General purpose components, Command Reference, Top
@chapter Inside Virtual X68000
@menu
* Basic types::                 
@end menu

@node Basic types,  , Inside Virtual X68000, Inside Virtual X68000
@section Basic types
Virtual X68000 defines several basic types to keep the program
portable. These types are defined in namespace
@code{vm68k::types} and imported in namespace
@code{vm68k}.

@menu
* Unsigned integer types::      
* Signed integer types::        
@end menu

@node Unsigned integer types, Signed integer types, Basic types, Basic types
@subsection Unsigned integer types
@code{uint_type} is a natural unsigned type that can
hold an unsigned word number on M68000. This type is
@code{unsigned int} on all host architectures.

@code{uint32_type} is a natural unsigned type that can
hold an unsigned long word number on M68000. This type is
@code{unsigned int} on host architectures that have
@code{unsigned int} with at least 32-bit.

@node Signed integer types,  , Unsigned integer types, Basic types
@subsection Signed integer types
@code{sint_type} is a natural signed type that can
hold a signed word number on M68000. This type is
@code{int} on most host architectures, but if the host
architecture cannot represent -0x8000 in that type, i.e. it
does not use 2's complement representation, it is @code{long
int} instead.

@code{sint32_type} is a natural signed type that can
hold a signed long word number on M68000. This type is
@code{int} on host architectures that have
@code{int} with at least 32-bit and that can represent
-0x80000000 in that type. Otherwise, it is @code{long
int} if the type can hold -0x80000000, or @code{long
long int} if the compiler is GCC. If no type can hold
-0x80000000 on the architecture, Virtual X68000 cannot be
compiled.

@node General purpose components, X68000 emulation, Inside Virtual X68000, Top
@chapter General purpose components
General purpose components are provided by the library libvm68k.
These components are declared in the namespace vm68k.

@menu
* Memory::                      
* Address space::               
* Processor::                   
@end menu

@node Memory, Address space, General purpose components, General purpose components
@section Memory
Memory is an object that can be mapped in an address space.
The class @code{memory} is the abstract base
class for all memory.

@menu
* @code{memory}: memory.        
@end menu

@node memory,  , Memory, Memory
@subsection @code{memory}
@cindex memory
This class has methods @code{get_16},
@code{get_8}, @code{get_32},
@code{put_16}, @code{put_8}, and
@code{put_32}. The methods
@code{get_16}, @code{get_8},
@code{put_16}, and @code{put_8}
are pure virtual and must be overridden in derived classes.
Default implementations for @code{get_32} and
@code{put_32} are provided but a derived class
can override those for better performance.

@node Address space, Processor, Memory, General purpose components
@section Address space
@cindex address space
Virtual X68000 uses a single address space to access memory
and peripheral devices.

@node Processor,  , Address space, General purpose components
@section Processor
@cindex processor
A processor is made of a pair of a context and an execution
unit. A context represents the dynamic state, which is
updated by program execution. An execution unit represents
the static setting that is not changed while program
execution.

@menu
* Context::                     
* Execution unit::              
@end menu

@node Context, Execution unit, Processor, Processor
@subsection Context
@cindex context
The state of the processor is stored in a context. Major
components of a context are a set of registers and a
reference to an address space.

@node Execution unit,  , Context, Processor
@subsection Execution unit
@cindex execution unit
Virtual X68000 encapsulates non-dynamic aspects of a M68000
processor into an execution unit.

@node X68000 emulation, Concept Index, General purpose components, Top
@chapter X68000 emulation
@menu
* Machine::                     
* Human68k::                    
@end menu

@node Machine, Human68k, X68000 emulation, X68000 emulation
@section Machine
@cindex machine
In Virtual X68000, a machine is an abstraction of X68000
hardware and firmware BIOS.

@menu
* SCC::                         
@end menu

@node SCC,  , Machine, Machine
@subsection Z8530 SCC
@cindex SCC
@cindex serial communication controller
@cindex Z8530
@cindex COM port
@cindex mouse port
X68000 uses a Z8530 SCC, or serial communication controller, for a COM
port and a mouse port.

@node Human68k,  , Machine, X68000 emulation
@section Human68k
@cindex Human68k
Virtual X68000 is unique as it also offers functions of the
basic operating system, Human68k.

@node Concept Index,  , X68000 emulation, Top
@unnumbered Concept Index

@printindex cp

@bye
