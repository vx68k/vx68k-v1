List of things to do in Virtual X68000.  -*-Outline-*-

* Adding ~/.vx68k Support

All per-user files should be stored in one place.

* Implement the DMA controller.

* Implement text cursor.

* Implement control code.

* Better text VRAM emulation.

** Optimize the text VRAM drawing.

** Implement hardware text scrolling, or at least prepare for it.

* Improve console device behaviour using emulated keyboard input.

* Implement minimum FLOAT calls.

* Implement DOS calls _FILES and _NFILES.

* Implement DOS drives.  This will require some run-time
configuration.

* Write the Reference Manual.

Maybe version 1.1 or later

* IOCS function handlers.

* More DOS compatibility.

* More machine instructions.

* Instruction handlers must be changed into templates.

* The value of errno must be looked at for DOS calls.

* Efficient CCR update.  (Mostly done)

Since CCR is normally updated more often than referenced, speed of CCR
update is important to improve system performance.

Deferred update seems difficult on m68k architecture.  Some bits in
CCR may not change by an instruction while others do, so its value
cannot be determined by the last operation.

M68k instructions can be categorized into three classes:
(1) that change all five bits in CCR,
(2) that change all bits except X, and
(3) that change Z only (bit test).

Version 1.2 or later

* Graphic VRAM emulation.

* Common case optimization.

Some common code sequences (strcpy, memcpy, etc.) can be optimized.

* Non-square pixel graphics.

X68000 has some graphics modes where pixels are not square.  Aspect
ratio is approx. 3:2.  Run-time scaling may be needed.

